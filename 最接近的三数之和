题目：
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。

示例：

输入：nums = [-1,2,1,-4], target = 1
输出：2
解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。

解题思路：
与三数之和的思路一样，用双指针和两边夹的方法，注意去掉重复的数来减少运算量。

int compare(int *a, int *b) {
    return a[0]-b[0];
}
int threeSumClosest(int* nums, int numsSize, int target){
    int i=0,a,b;
    int sum=10000;

    qsort(nums,numsSize,sizeof(nums[0]),compare);

    while(i<numsSize-2){
        a=i+1,b=numsSize-1;
        while(a<b){
            if(nums[i]+nums[a]+nums[b]==target)
                return target;
            else if(nums[i]+nums[a]+nums[b]<target){
                if(abs(sum-target)>abs(nums[i]+nums[a]+nums[b]-target))
                    sum=nums[i]+nums[a]+nums[b];
                while(nums[a]==nums[++a]&&a<b);                
            }
            else{
                if(abs(sum-target)>abs(nums[i]+nums[a]+nums[b]-target))
                    sum=nums[i]+nums[a]+nums[b];
                while(nums[b]==nums[--b]&&a<b);
            }
        }
        while(nums[i]==nums[++i]&&i<numsSize-2);
    }

    return sum;
}
