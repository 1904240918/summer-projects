题目：
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

方法一：
从前往后，判断每个位置所能到达的最远位置，若当前位置大于最大位置时则返回false，反之返回true
bool canJump(int* nums, int numsSize){
    int max=nums[0];

    for(int i=1;i<numsSize;i++){
        if(i>max)
            return false;
        if(i+nums[i]>max)
            max=i+nums[i];
    }
    return true;
}

方法二：
从后往前，将最后一个位置记为min,判断是否前面有位置能经过一系列跳跃到达该位置，若存在则记录该位置min，再往前判断
{
    int min=numsSize-1;

    for(int i=numsSize-2;i>0;i--){
        if(i+nums[i]>=min)
            min=i;
    }

    return nums[0]>=min;
}
